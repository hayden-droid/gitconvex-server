# GraphQL schema example
#
# https://gqlgen.com/getting-started/

"""
Returns the host OS and the current version of gitconvex
"""
type HealthCheckParams{
    "OS on which gitconvex is running"
    os: String!
    "Current version of gitconvex"
    gitconvex: String!
}

"""
Details about the repo data stored in gitconvex JSON data file
"""
type FetchRepoParams{
    "UUID based ID generated for the repo"
    repoId: [String]!
    "Name of the repo given while adding the repo"
    repoName: [String]!
    "Path of the git repository"
    repoPath: [String]!
    "Timestamp at which the repo was added to gitconvex"
    timeStamp: [String]!
}

"""
Basic information about the target repository
"""
type GitRepoStatusResults {
    "The remote repos available in the target repository"
    gitRemoteData: String
    "Name of the repo"
    gitRepoName: String
    "List of all the local branches available in the repo"
    gitBranchList: [String]
    "List of all the local branches + remote branches available in the repo"
    gitAllBranchList: [String]
    "The current branch"
    gitCurrentBranch: String
    "Remote host name based on the remote URL (E.g: https://github.com/github/repo.git -> Github)"
    gitRemoteHost: String
    "Total number of commits tracked by the current branch"
    gitTotalCommits: Float
    "The latest commit (HEAD commit)"
    gitLatestCommit: String
    "Total number of files tracked by git repo"
    gitTotalTrackedFiles: Int
}

"""
Returns the content of the target directory along with the latest commit message
(File explorer similar to github)
"""
type GitFolderContentResults{
    "List of all the files and folders tracked by git from the target directory"
    trackedFiles: [String]!
    "The respective commit messages"
    fileBasedCommits: [String]!
}

"""
Returns the total number of commits in the repo and the array of 10 commit log entries
"""
type GitCommitLogResults {
    "Total number of commits tracked by the branch"
    totalCommits: Float
    "Array of commit log entries `gitCommits`"
    commits: [gitCommits]
}

"""
The required information about commits
"""
type gitCommits {
    "The SHA of the commit"
    hash: String
    "The author of the commit"
    author: String
    "The timestamp of the commit"
    commitTime: String
    "The message of the commit"
    commitMessage: String
    "The number of files changed as part of the commit"
    commitFilesCount: Int
}

"""
Returns type of the file change (M | D | A) and the file name
"""
type gitCommitFileResult{
    "Type of change (M | D | A)"
    type: String!
    "Name of the file"
    fileName: String!
}

"""
Content of the file selected for viewing
"""
type codeFileType{
    "File content split line by line as array"
    fileData: [String]!
}

"""
The results with the Modified, Staged and Untracked files
"""
type gitChangeResults{
    "List of untracked files"
    gitUntrackedFiles: [String]!
    "Files deviating from the index"
    gitChangedFiles: [String]!
    "Files which are already staged"
    gitStagedFiles: [String]!
}

"""
The status of git diff and the content of the file with diff indicators
"""
type fileLineChangeResult{
    "The status of the git diff for the file denoting the number of changes (Additions and Deletions)"
    diffStat: String!
    "The content of the file with the diff indicators (+/-)"
    fileDiff: [String]!
}

"""
The current path of the data fle and the port to which gitconvex server listens
"""
type settingsDataResults{
    "The path of the JSON data file"
    settingsDatabasePath: String!
    "The current port that gitconvex is configured to listen"
    settingsPortDetails: String!
}

"""
Result after comparing two branches from the repo
"""
type branchCompareResults{
    "The date used to group differing commits"
    date: String!
    "The list of differing commits"
    commits: [gitCommits]!
}

"""
Details about the remote repositories
"""
type remoteDetails {
    "Name of the remote"
    remoteName: String!
    "URL of the upstream remote"
    remoteUrl: String!
}

"""
Indicator showing if branch has an upstream or not and the list of commits
"""
type UnPushedCommitResult{
    "Indicator that denotes if the branch has an upstream or not"
    isNewBranch: Boolean!
    "List of commits that are not pushed to the remote branch"
    gitCommits: [gitCommits]!
}

type Query {
    "To check if gitconvex API is reachable"
    healthCheck: HealthCheckParams!
    "Fetches the details of the repo stored in the JSON repo data file"
    fetchRepo: FetchRepoParams!
    "Returns the current status of the target repo"
    gitRepoStatus(repoId: String!): GitRepoStatusResults!
    "Dislays the content of a directory from the git workstree along with its respective commit message"
    gitFolderContent(repoId: String!, directoryName: String): GitFolderContentResults!
    "Lists upto 10 commit logs"
    gitCommitLogs(repoId: String!, referenceCommit: String!): GitCommitLogResults!
    "Returns the files that are changed as part of a commit based on the `commitHash`"
    gitCommitFiles(repoId: String!, commitHash: String!): [gitCommitFileResult]!
    "Returns the commit logs based on the search query"
    searchCommitLogs(repoId: String!, searchType: String!, searchKey: String!): [gitCommits]!
    "Dsiplays the content of a selected file from the repository work tree"
    codeFileDetails(repoId: String!, fileName: String!): codeFileType!
    "Returns the items that are modified (similar to `git status`)"
    gitChanges(repoId: String!): gitChangeResults!
    "Returns the list of commits that are not pushed to remote"
    gitUnPushedCommits(repoId: String!, remoteURL: String!, remoteBranch: String!): UnPushedCommitResult!
    "Line by Line git difference for text files"
    gitFileLineChanges(repoId: String!, fileName: String!): fileLineChangeResult!
    "Returns the current config data from gitconvex env_config JSON data file"
    settingsData: settingsDataResults!
    "Compares two commits and returns the results"
    commitCompare(repoId: String!,baseCommit: String!, compareCommit: String!): [gitCommitFileResult]!
    "Compared two branches and returns the list of differing commits"
    branchCompare(repoId: String!, baseBranch: String!, compareBranch: String!): [branchCompareResults]!
    "Returns the details about a repositorie's remote repos"
    getRemote(repoId: String!): [remoteDetails]!
}

type AddRepoParams{
    repoId: String!
    status: String!
    message: String!
}

type deleteStatus{
    status: String!
    repoId: String!
}

type remoteMutationResult{
    status: String!
}


type BranchDeleteStatus{
    status: String!
}

type FetchResult{
    status: String!
    fetchedItems: [String]!
}

type PullResult{
    status: String!
    pulledItems: [String]!
}

type Mutation {
    addRepo(repoName: String!, repoPath: String!, cloneSwitch: Boolean!, repoURL: String, initSwitch: Boolean!, authOption: String!, sshKeyPath: String, userName: String, password: String): AddRepoParams!
    addBranch(repoId: String!, branchName: String!): String!
    checkoutBranch(repoId: String!, branchName: String!): String!
    deleteBranch(repoId: String!, branchName: String!, forceFlag: Boolean!): BranchDeleteStatus!
    fetchFromRemote(repoId: String!, remoteUrl: String, remoteBranch: String): FetchResult!
    pullFromRemote(repoId: String!, remoteUrl: String, remoteBranch: String): PullResult!
    stageItem(repoId: String!, item: String!): String!
    removeStagedItem(repoId: String!, item: String!): String!
    removeAllStagedItem(repoId: String!): String!
    stageAllItems(repoId: String!): String!
    commitChanges(repoId: String!, commitMessage: String!): String!
    pushToRemote(repoId: String!, remoteHost: String!, branch: String!): String!
    settingsEditPort(newPort: String!): String!
    updateRepoDataFile(newDbFile: String!): String!
    deleteRepo(repoId: String!): deleteStatus!
    updateRepoName(repoId: String!, repoName: String!): String!
    addRemote(repoId: String!, remoteName: String!, remoteUrl: String!): remoteMutationResult!
    deleteRemote(repoId: String!, remoteName: String!): remoteMutationResult!
    editRemote(repoId: String!, remoteName: String!, remoteUrl: String!): remoteMutationResult!
}
