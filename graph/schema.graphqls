# GraphQL schema example
#
# https://gqlgen.com/getting-started/

"""
Returns the host OS and the current version of gitconvex
"""
type HealthCheckParams{
    "OS on which gitconvex is running"
    os: String!
    "Current version of gitconvex"
    gitconvex: String!
}

"""
Details about the repo data stored in gitconvex JSON data file
"""
type FetchRepoParams{
    "UUID based ID generated for the repo"
    repoId: [String]!
    "Name of the repo given while adding the repo"
    repoName: [String]!
    "Path of the git repository"
    repoPath: [String]!
    "Timestamp at which the repo was added to gitconvex"
    timeStamp: [String]!
}

"""
Basic information about the target repository
"""
type GitRepoStatusResults {
    "The remote repos available in the target repository"
    gitRemoteData: String
    "Name of the repo"
    gitRepoName: String
    "List of all the local branches available in the repo"
    gitBranchList: [String]
    "List of all the local branches + remote branches available in the repo"
    gitAllBranchList: [String]
    "The current branch"
    gitCurrentBranch: String
    "Remote host name based on the remote URL (E.g: https://github.com/github/repo.git -> Github)"
    gitRemoteHost: String
    "Total number of commits tracked by the current branch"
    gitTotalCommits: Float
    "The latest commit (HEAD commit)"
    gitLatestCommit: String
    "Total number of files tracked by git repo"
    gitTotalTrackedFiles: Int
}

"""
Returns the content of the target directory along with the latest commit message
(File explorer similar to github)
"""
type GitFolderContentResults{
    "List of all the files and folders tracked by git from the target directory"
    trackedFiles: [String]!
    "The respective commit messages"
    fileBasedCommits: [String]!
}

"""
Returns the total number of commits in the repo and the array of 10 commit log entries
"""
type GitCommitLogResults {
    "Total number of commits tracked by the branch"
    totalCommits: Int
    "Array of commit log entries `gitCommits`"
    commits: [gitCommits]
}

"""
The required information about commits
"""
type gitCommits {
    "The SHA of the commit"
    hash: String
    "The author of the commit"
    author: String
    "The timestamp of the commit"
    commitTime: String
    "The message of the commit"
    commitMessage: String
    "The number of files changed as part of the commit"
    commitFilesCount: Int
}

"""
Returns type of the file change (M | D | A) and the file name
"""
type gitCommitFileResult{
    "Type of change (M | D | A)"
    type: String!
    "Name of the file"
    fileName: String!
}

"""
Content of the file selected for viewing
"""
type codeFileType{
    "File content split line by line as array"
    fileData: [String]!
}

"""
The results with the Modified, Staged and Untracked files
"""
type gitChangeResults{
    "List of untracked files"
    gitUntrackedFiles: [String]!
    "Files deviating from the index"
    gitChangedFiles: [String]!
    "Files which are already staged"
    gitStagedFiles: [String]!
}

"""
The status of git diff and the content of the file with diff indicators
"""
type fileLineChangeResult{
    "The status of the git diff for the file denoting the number of changes (Additions and Deletions)"
    diffStat: String!
    "The content of the file with the diff indicators (+/-)"
    fileDiff: [String]!
}

"""
The current path of the data fle and the port to which gitconvex server listens
"""
type settingsDataResults{
    "The path of the JSON data file"
    settingsDatabasePath: String!
    "The current port that gitconvex is configured to listen"
    settingsPortDetails: String!
}

"""
Result after comparing two branches from the repo
"""
type branchCompareResults{
    "The date used to group differing commits"
    date: String!
    "The list of differing commits"
    commits: [gitCommits]!
}

"""
Details about the remote repositories
"""
type remoteDetails {
    "Name of the remote"
    remoteName: String!
    "URL of the upstream remote"
    remoteUrl: String!
}

"""
Indicator showing if branch has an upstream or not and the list of commits
"""
type UnPushedCommitResult{
    "Indicator that denotes if the branch has an upstream or not"
    isNewBranch: Boolean!
    "List of commits that are not pushed to the remote branch"
    gitCommits: [gitCommits]!
}

type Query {
    "To check if gitconvex API is reachable"
    healthCheck: HealthCheckParams!

    "Fetches the details of the repo stored in the JSON repo data file"
    fetchRepo: FetchRepoParams!

    "Returns the current status of the target repo"
    gitRepoStatus(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!
    ): GitRepoStatusResults!

    "Displays the content of a directory from the git worktree along with its respective commit message"
    gitFolderContent(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the directory from which the content (files and sub-dirs) will be fetched"
        directoryName: String
    ): GitFolderContentResults!

    "Lists up to 10 commit logs"
    gitCommitLogs(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The commit SHA which will be used as reference to pick the next 10 (or less if there are less than 10 commits) commits"
        referenceCommit: String!
    ): GitCommitLogResults!

    "Returns the files that are changed as part of a commit based on the `commitHash`"
    gitCommitFiles(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The SHA of the target commit"
        commitHash: String!
    ): [gitCommitFileResult]!

    "Returns the commit logs based on the search query"
    searchCommitLogs(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The type of the search (commit hash, commit message or the commit author"
        searchType: String!,
        "The search query to lookup for the commit"
        searchKey: String!
    ): [gitCommits]!

    "Displays the content of a selected file from the repository work tree"
    codeFileDetails(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the file which will be displayed with code highlighting"
        fileName: String!
    ): codeFileType!

    "Returns the items that are modified (similar to `git status`)"
    gitChanges(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!
    ): gitChangeResults!

    "Returns the list of commits that are not pushed to remote"
    gitUnPushedCommits(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The URL of the remote repo"
        remoteURL: String!,
        "The target remote / upstream branch"
        remoteBranch: String!
    ): UnPushedCommitResult!

    "Line by Line git difference for text files"
    gitFileLineChanges(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the file to look for the difference"
        fileName: String!
    ): fileLineChangeResult!

    "Returns the current config data from gitconvex env_config JSON data file"
    settingsData: settingsDataResults!

    "Compares two commits and returns the results"
    commitCompare(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The commit to which the selected commit needs to be compared"
        baseCommit: String!,
        "The commit which will be compared with the base commit and the difference will be returned"
        compareCommit: String!
    ): [gitCommitFileResult]!

    "Compares two branches and returns the list of differing commits"
    branchCompare(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The branch to which the target branch needs to be compared"
        baseBranch: String!,
        "The branch which will be compared with the base branch and the commits will be returned"
        compareBranch: String!
    ): [branchCompareResults]!

    "Returns the details about a repository's remote repos"
    getRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!
    ): [remoteDetails]!
}

"""
The response holding the data of the newly added repo
"""
type AddRepoParams{
    "The UUID generated for the new repo"
    repoId: String!
    "Status denoting if the repo has been added successfully or not"
    status: String!
    "A message stating if the repo is added to the data file or not"
    message: String!
}

"""
Result returned after attempting to delete a repo entry from the gitconvex data file
"""
type deleteStatus{
    "String based status denoting the outcome of the delete"
    status: String!
    "UUID of the repo deleted from the data file"
    repoId: String!
}

"""
Shows the status if the branch has been deleted or not
"""
type BranchDeleteStatus{
    "Branch delete status"
    status: String!
}

"""
Result of the remote fetch operation
"""
type FetchResult{
    "Status string denoting the fetch operation"
    status: String!
    "Message denoting the outcome of the fetch"
    fetchedItems: [String]!
}

"""
Result of the remote pull operation
"""
type PullResult{
    "Status string denoting the pull operation"
    status: String!
    "Message denoting the outcome of the pull"
    pulledItems: [String]!
}

"""
Returns the status after attempting remote data manipulation operations such as adding / deleting or editing a remote
"""
type remoteMutationResult{
    "Status denoting the outcome of the remote operation"
    status: String!
}

type Mutation {
    "Adds a new repo to the gitconvex repo datastore"
    addRepo(
        "The user defiend name of the repo. This will be used only for display purposes and nothing else"
        repoName: String!,
        "The actual path of the git repo"
        repoPath: String!,
        "Boolean switch to denote if the repo needs to be cloned from the remote source or not"
        cloneSwitch: Boolean!,
        "The URL of the remote repo"
        repoURL: String,
        "Switch to enable repo init if the path is not a git repository"
        initSwitch: Boolean!,
        "The authentication to be used to access the remote repo (SSH or Basic auth)"
        authOption: String!,
        "If SSH is the auth option, then this field holds the path of the SSH private key"
        sshKeyPath: String,
        "User name for basic auth"
        userName: String,
        "Password for basic auth. This will be encrypted and stored in the JSON file"
        password: String
    ): AddRepoParams!

    "Adds a new branch to the repo"
    addBranch(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "Name of the new branch to be added"
        branchName: String!
    ): String!

    "Checks out to the target branch"
    checkoutBranch(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "Name of the branch to be checked out"
        branchName: String!
    ): String!

    "Deletes the selected local branch from the repo"
    deleteBranch(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "Name of the branch to be deleted from the repo (works only for local branched and not remote branches)"
        branchName: String!,
        "Switch to enable force deletion of the branch ignoring unmerged changes"
        forceFlag: Boolean!
    ): BranchDeleteStatus!

    "Fetches the changes from the target remote"
    fetchFromRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The URL of the target remote repo"
        remoteUrl: String,
        "The target upstream / remote branch"
        remoteBranch: String
    ): FetchResult!

    "Pulls the changes from the remote repo"
    pullFromRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The URL of the target remote repo"
        remoteUrl: String,
        "The target upstream / remote branch"
        remoteBranch: String
    ): PullResult!

    "Stages a single item. Similar to `git add <item>`"
    stageItem(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The file item / change to be staged"
        item: String!
    ): String!

    "Removes a staged item from the index. Similar to `git reset <item>`"
    removeStagedItem(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The change item to be removed from the index"
        item: String!
    ): String!

    "Removes all the staged items from the index. Similar to `git reset`"
    removeAllStagedItem(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!
    ): String!

    "Stages all the changes. Similar to `git add --all`"
    stageAllItems(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!
    ): String!

    "Commits the staged changes with a commit message"
    commitChanges(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The message for the commit"
        commitMessage: [String]!
    ): String!

    "Pushes the commits to the remote"
    pushToRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the remote repo"
        remoteHost: String!,
        "The target upstream branch"
        branch: String!
    ): String!

    "To change the port to which gitconvex server listens"
    settingsEditPort(
        "The new port number to which you wish gitconvex to listen to"
        newPort: String!
    ): String!

    "To update the path of the JSON data file which holds the data of all the repositories tracked by gitconvex"
    updateRepoDataFile(
        "The path of the new JSON data file"
        newDbFile: String!
    ): String!

    "To delete a repo from the JSON data file. The actual repo will not be affected in anyway."
    deleteRepo(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!
    ): deleteStatus!

    "To update the name of the repo in the JSON data file"
    updateRepoName(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The new name for the repo"
        repoName: String!
    ): String!

    "To add a new remote to the repository"
    addRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the remote repo"
        remoteName: String!,
        "The URL of the remote repo"
        remoteUrl: String!
    ): remoteMutationResult!

    "To remove an existing remote from the repo"
    deleteRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the remote to be deleted"
        remoteName: String!
    ): remoteMutationResult!

    "To edit the name of the existing remote"
    editRemote(
        "The UUID of the repo. It will be available in the JSON data file"
        repoId: String!,
        "The name of the remote"
        remoteName: String!,
        "The URL of the remote repo"
        remoteUrl: String!
    ): remoteMutationResult!
}
