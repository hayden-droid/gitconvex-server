// Code generated by MockGen. DO NOT EDIT.
// Source: git/branch/git_branch_add.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
)

// MockAdd is a mock of Add interface.
type MockAdd struct {
	ctrl     *gomock.Controller
	recorder *MockAddMockRecorder
}

// MockAddMockRecorder is the mock recorder for MockAdd.
type MockAddMockRecorder struct {
	mock *MockAdd
}

// NewMockAdd creates a new mock instance.
func NewMockAdd(ctrl *gomock.Controller) *MockAdd {
	mock := &MockAdd{ctrl: ctrl}
	mock.recorder = &MockAddMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdd) EXPECT() *MockAddMockRecorder {
	return m.recorder
}

// AddBranch mocks base method.
func (m *MockAdd) AddBranch(branchName string, remoteSwitch bool, targetCommit *git.Commit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBranch", branchName, remoteSwitch, targetCommit)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBranch indicates an expected call of AddBranch.
func (mr *MockAddMockRecorder) AddBranch(branchName, remoteSwitch, targetCommit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBranch", reflect.TypeOf((*MockAdd)(nil).AddBranch), branchName, remoteSwitch, targetCommit)
}
