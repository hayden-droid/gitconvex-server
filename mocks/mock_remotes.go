// Code generated by MockGen. DO NOT EDIT.
// Source: git/middleware/remotes.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
)

// MockRemotes is a mock of Remotes interface.
type MockRemotes struct {
	ctrl     *gomock.Controller
	recorder *MockRemotesMockRecorder
}

// MockRemotesMockRecorder is the mock recorder for MockRemotes.
type MockRemotesMockRecorder struct {
	mock *MockRemotes
}

// NewMockRemotes creates a new mock instance.
func NewMockRemotes(ctrl *gomock.Controller) *MockRemotes {
	mock := &MockRemotes{ctrl: ctrl}
	mock.recorder = &MockRemotesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemotes) EXPECT() *MockRemotesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRemotes) Create(arg0, arg1 string) (*git.Remote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*git.Remote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRemotesMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRemotes)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRemotes) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRemotesMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRemotes)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockRemotes) Get() git.RemoteCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(git.RemoteCollection)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRemotesMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRemotes)(nil).Get))
}

// List mocks base method.
func (m *MockRemotes) List() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRemotesMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRemotes)(nil).List))
}

// Lookup mocks base method.
func (m *MockRemotes) Lookup(arg0 string) (*git.Remote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0)
	ret0, _ := ret[0].(*git.Remote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockRemotesMockRecorder) Lookup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockRemotes)(nil).Lookup), arg0)
}

// SetUrl mocks base method.
func (m *MockRemotes) SetUrl(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUrl", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUrl indicates an expected call of SetUrl.
func (mr *MockRemotesMockRecorder) SetUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUrl", reflect.TypeOf((*MockRemotes)(nil).SetUrl), arg0, arg1)
}
