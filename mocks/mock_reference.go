// Code generated by MockGen. DO NOT EDIT.
// Source: git/middleware/reference.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
)

// MockReference is a mock of Reference interface.
type MockReference struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceMockRecorder
}

// MockReferenceMockRecorder is the mock recorder for MockReference.
type MockReferenceMockRecorder struct {
	mock *MockReference
}

// NewMockReference creates a new mock instance.
func NewMockReference(ctrl *gomock.Controller) *MockReference {
	mock := &MockReference{ctrl: ctrl}
	mock.recorder = &MockReferenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReference) EXPECT() *MockReferenceMockRecorder {
	return m.recorder
}

// GetGitReference mocks base method.
func (m *MockReference) GetGitReference() *git.Reference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitReference")
	ret0, _ := ret[0].(*git.Reference)
	return ret0
}

// GetGitReference indicates an expected call of GetGitReference.
func (mr *MockReferenceMockRecorder) GetGitReference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitReference", reflect.TypeOf((*MockReference)(nil).GetGitReference))
}

// Name mocks base method.
func (m *MockReference) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockReferenceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockReference)(nil).Name))
}

// SetTarget mocks base method.
func (m *MockReference) SetTarget(id *git.Oid, message string) (*git.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTarget", id, message)
	ret0, _ := ret[0].(*git.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTarget indicates an expected call of SetTarget.
func (mr *MockReferenceMockRecorder) SetTarget(id, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTarget", reflect.TypeOf((*MockReference)(nil).SetTarget), id, message)
}

// Target mocks base method.
func (m *MockReference) Target() *git.Oid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(*git.Oid)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockReferenceMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockReference)(nil).Target))
}
