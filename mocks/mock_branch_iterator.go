// Code generated by MockGen. DO NOT EDIT.
// Source: git/middleware/branch_iterator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
)

// MockBranchIterator is a mock of BranchIterator interface.
type MockBranchIterator struct {
	ctrl     *gomock.Controller
	recorder *MockBranchIteratorMockRecorder
}

// MockBranchIteratorMockRecorder is the mock recorder for MockBranchIterator.
type MockBranchIteratorMockRecorder struct {
	mock *MockBranchIterator
}

// NewMockBranchIterator creates a new mock instance.
func NewMockBranchIterator(ctrl *gomock.Controller) *MockBranchIterator {
	mock := &MockBranchIterator{ctrl: ctrl}
	mock.recorder = &MockBranchIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchIterator) EXPECT() *MockBranchIteratorMockRecorder {
	return m.recorder
}

// ForEach mocks base method.
func (m *MockBranchIterator) ForEach(arg0 func(*git.Branch, git.BranchType) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEach", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEach indicates an expected call of ForEach.
func (mr *MockBranchIteratorMockRecorder) ForEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockBranchIterator)(nil).ForEach), arg0)
}
