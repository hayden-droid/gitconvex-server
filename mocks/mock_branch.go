// Code generated by MockGen. DO NOT EDIT.
// Source: git/middleware/branch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
)

// MockBranch is a mock of Branch interface.
type MockBranch struct {
	ctrl     *gomock.Controller
	recorder *MockBranchMockRecorder
}

// MockBranchMockRecorder is the mock recorder for MockBranch.
type MockBranchMockRecorder struct {
	mock *MockBranch
}

// NewMockBranch creates a new mock instance.
func NewMockBranch(ctrl *gomock.Controller) *MockBranch {
	mock := &MockBranch{ctrl: ctrl}
	mock.recorder = &MockBranchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranch) EXPECT() *MockBranchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBranch) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBranchMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBranch)(nil).Delete))
}

// Target mocks base method.
func (m *MockBranch) Target() *git.Oid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(*git.Oid)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockBranchMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockBranch)(nil).Target))
}
