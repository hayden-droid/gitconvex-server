// Code generated by MockGen. DO NOT EDIT.
// Source: git/commit/git_list_all_commit_logs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
)

// MockListAllLogs is a mock of ListAllLogs interface.
type MockListAllLogs struct {
	ctrl     *gomock.Controller
	recorder *MockListAllLogsMockRecorder
}

// MockListAllLogsMockRecorder is the mock recorder for MockListAllLogs.
type MockListAllLogsMockRecorder struct {
	mock *MockListAllLogs
}

// NewMockListAllLogs creates a new mock instance.
func NewMockListAllLogs(ctrl *gomock.Controller) *MockListAllLogs {
	mock := &MockListAllLogs{ctrl: ctrl}
	mock.recorder = &MockListAllLogsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListAllLogs) EXPECT() *MockListAllLogsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockListAllLogs) Get() ([]git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockListAllLogsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockListAllLogs)(nil).Get))
}
