// Code generated by MockGen. DO NOT EDIT.
// Source: ../git/interface/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	libgit_interface "github.com/neel1996/gitconvex/git/interface"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Walk mocks base method.
func (m *MockRepository) Walk() (libgit_interface.RevWalk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk")
	ret0, _ := ret[0].(libgit_interface.RevWalk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Walk indicates an expected call of Walk.
func (mr *MockRepositoryMockRecorder) Walk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockRepository)(nil).Walk))
}
