// Code generated by MockGen. DO NOT EDIT.
// Source: git/middleware/commit.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v31"
	middleware "github.com/neel1996/gitconvex/git/middleware"
)

// MockCommit is a mock of Commit interface.
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
}

// MockCommitMockRecorder is the mock recorder for MockCommit.
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance.
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// GetGitCommit mocks base method.
func (m *MockCommit) GetGitCommit() *git.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitCommit")
	ret0, _ := ret[0].(*git.Commit)
	return ret0
}

// GetGitCommit indicates an expected call of GetGitCommit.
func (mr *MockCommitMockRecorder) GetGitCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitCommit", reflect.TypeOf((*MockCommit)(nil).GetGitCommit))
}

// Id mocks base method.
func (m *MockCommit) Id() *git.Oid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(*git.Oid)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockCommitMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockCommit)(nil).Id))
}

// Parent mocks base method.
func (m *MockCommit) Parent(arg0 uint) middleware.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent", arg0)
	ret0, _ := ret[0].(middleware.Commit)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockCommitMockRecorder) Parent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockCommit)(nil).Parent), arg0)
}

// ParentCount mocks base method.
func (m *MockCommit) ParentCount() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentCount")
	ret0, _ := ret[0].(uint)
	return ret0
}

// ParentCount indicates an expected call of ParentCount.
func (mr *MockCommitMockRecorder) ParentCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentCount", reflect.TypeOf((*MockCommit)(nil).ParentCount))
}

// Tree mocks base method.
func (m *MockCommit) Tree() (*git.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tree")
	ret0, _ := ret[0].(*git.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tree indicates an expected call of Tree.
func (mr *MockCommitMockRecorder) Tree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tree", reflect.TypeOf((*MockCommit)(nil).Tree))
}
