// Code generated by MockGen. DO NOT EDIT.
// Source: git/commit/git_commit_file_history.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	middleware "github.com/neel1996/gitconvex/git/middleware"
	model "github.com/neel1996/gitconvex/graph/model"
)

// MockFileHistory is a mock of FileHistory interface.
type MockFileHistory struct {
	ctrl     *gomock.Controller
	recorder *MockFileHistoryMockRecorder
}

// MockFileHistoryMockRecorder is the mock recorder for MockFileHistory.
type MockFileHistoryMockRecorder struct {
	mock *MockFileHistory
}

// NewMockFileHistory creates a new mock instance.
func NewMockFileHistory(ctrl *gomock.Controller) *MockFileHistory {
	mock := &MockFileHistory{ctrl: ctrl}
	mock.recorder = &MockFileHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHistory) EXPECT() *MockFileHistoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFileHistory) Get(commit middleware.Commit) ([]*model.GitCommitFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", commit)
	ret0, _ := ret[0].([]*model.GitCommitFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileHistoryMockRecorder) Get(commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileHistory)(nil).Get), commit)
}
